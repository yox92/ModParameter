import * as fs from "fs";
import * as path from "path";
import {mongoid} from "mongoid-js";
import {EnumUtils} from "../Service/EnumUtils";
import {AmmoEnum} from "../ListIdItem/AmmoEnum";
import {WeaponEnum} from "../ListIdItem/WeaponEnum";
import {MedicEnum} from "../ListIdItem/MedicEnum";

const outputFileAmmo = path.resolve(__dirname, "id_mongo_new_id_clone_ammo_.json"); // Fichier de sortie
const outputFileWeapon = path.resolve(__dirname, "id_mongo_new_id_clone_weapon_.json"); // Fichier de sortie
const outputFileMedic = path.resolve(__dirname, "id_mongo_new_id_clone_medic_.json"); // Fichier de sortie

/**
 * Fonction pour g√©n√©rer un identifiant MongoDB
 */
function generateMongoObjectId(): string {
   return mongoid()
}

/**
 *  Charge les mappings existants depuis le fichier JSON
 */
function loadExistingMappings(): Record<string, string> {
    try {
        if (!fs.existsSync(outputFileMedic)) {
            console.warn(`‚ö†Ô∏è Fichier ${outputFileMedic} introuvable, cr√©ation d'un nouveau.`);
            return {};
        }

        const data = fs.readFileSync(outputFileMedic, "utf-8");
        return data.trim() ? JSON.parse(data) : {};
    } catch (error) {
        console.error("‚ùå Erreur lors du chargement du fichier JSON :", error);
        return {};
    }
}

/**
 *  Sauvegarde le JSON des mappings (_tpl -> _id g√©n√©r√©)
 */
function saveMappings(mappings: Record<string, string>) {
    try {
        fs.writeFileSync(outputFileMedic, JSON.stringify(mappings, null, 4), "utf-8");
        console.log(`‚úÖ Fichier mis √† jour : ${outputFileMedic}`);
    } catch (error) {
        console.error("‚ùå Erreur lors de l'√©criture du fichier JSON :", error);
    }
}

/**
 *  G√©n√©rer un ID unique pour chaque ID de la liste
 */
async function generateAllIds(ids: string[]): Promise<void> {
    const mappings = loadExistingMappings();
    let newEntries = 0;
    let skippedIds = 0;

    console.log(`üîç V√©rification des ${ids.length} IDs de la liste...`);

    const alreadyExistingIds: string[] = [];

    for (const id of ids) {
        if (!mappings[id]) {
            mappings[id] = generateMongoObjectId();
            console.log(`G√©n√©ration d'un nouvel ID pour : ${id} -> ${mappings[id]}`);
            newEntries++;
        } else {
            alreadyExistingIds.push(id);
        }
    }

    console.log(`üü¢ ${alreadyExistingIds.length} IDs √©taient d√©j√† pr√©sents dans le fichier et n'ont pas √©t√© g√©n√©r√©s.`);
    console.log(`üìú Liste des IDs d√©j√† existants :`, alreadyExistingIds);
    if (newEntries > 0) {
        saveMappings(mappings);
        console.log(`‚úÖ ${newEntries} nouveaux IDs ont √©t√© g√©n√©r√©s.`);
    } else {
        console.log("‚úÖ Tous les IDs existent d√©j√†, rien √† faire.");
    }

    if (skippedIds > 0) {
        console.warn(`‚ö†Ô∏è ${skippedIds} IDs √©taient invalides et n'ont pas √©t√© trait√©s.`);
    }

    console.log(`üìä R√©sum√© final : ${ids.length} IDs √† traiter, ${Object.keys(mappings).length} enregistr√©s, ${skippedIds} ignor√©s.`);
}

/**
 *  Ex√©cution principale
 */
async function main() {
    // const idsAmmos: string[] = EnumUtils.getAllValues(AmmoEnum)
    // await generateAllIds(idsAmmos);
    //
    // const idsWeapon: string[] = EnumUtils.getAllValues(WeaponEnum)
    // await generateAllIds(idsWeapon);

    const idsMedic: string[] = EnumUtils.getAllValues(MedicEnum)
    await generateAllIds(idsMedic);
}

main().catch(console.error);
